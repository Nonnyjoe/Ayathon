// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/UserAccount.sol";
import "../src/IUserAccount.sol";
import "../src/AccountFactory.sol";
// import "../src/Certificate.sol";

contract AccountTest is Test {
    AccountFactory public factory;
    UserAccount public account;
    address child;
   
    address owner = 0xA771E1625DD4FAa2Ff0a41FA119Eb9644c9A46C8;
    address accountholder1 = mkaddr('holder1');
    address accountholder2 = mkaddr('holder2');
    address accountholder3 = mkaddr('holder3');

    function setUp() public {
        // Forked Sepolia Testnet to test Signature Validity
        // uint sepolia = vm.createFork("https://celo-alfajores-testnet.rpc.thirdweb.com", 20734644);
        // vm.selectFork(sepolia);
        vm.startPrank(owner);
        factory = new AccountFactory();   
        vm.stopPrank();   
    }

    function testCreateAccount() public {
        vm.startPrank(owner);
        child = factory.CreateAccount("Expert Solidity", "EXPSC", 12);
        IUserAccount(child).issueCertificate("CHINONSO", accountholder1, "TESTING");
        vm.stopPrank();   
    }


    function testAccountOperations() public {
        testCreateAccount();
        vm.startPrank(owner);
        bytes[] memory certificates = factory.getAllCertificates(accountholder1);
        bytes memory cert = certificates[0];
        // the generated bytes (cert) is 0xb1d34a44360a83900e70eb8daa390bcc699df20a54455354494e47;
        // The below function will retun the address of the company that issued out the certificate.
        address certIssuer = factory.verifyCertificates1(cert);
        console2.log(certIssuer);
        // Check foundry test Log for output of the verifyCertificate Function
        // Expected result is (Chinonso, Address, 0, TESTING, 1);
        IUserAccount(certIssuer).verifyCertificate(cert);
        IUserAccount(certIssuer).RevokeCertificate(accountholder1);
        vm.stopPrank();  
    }
    
    function mkaddr(string memory name) public returns (address) {
        address addr = address(
            uint160(uint256(keccak256(abi.encodePacked(name))))
        );
        vm.label(addr, name);
        return addr;
    }
}

// bytes memory sig = hex"20b4afa99ab5a6a1ab22c439cf50540ca1e15842796af65c24a9feda68214921308464a8a7d3e6534da2e20c7830b621d9db973dc0ecda723ffdb369d3a045bd1b";
